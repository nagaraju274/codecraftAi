
import { GitBranch, Code, Wind, Terminal, Database, Container, Cloud, Anchor, Feather, Leaf, Bot, TestTube, Briefcase, FunctionSquare, Pilcrow, Hash, Brain, Braces, Brackets, Regex } from 'lucide-react';

export const cheatsheetData = [
  {
    id: 'git',
    title: 'Git & GitHub',
    description: 'Common commands for version control with Git.',
    category: 'Tools',
    icon: GitBranch,
    items: [
      { command: 'git init', description: 'Initializes a new Git repository in the current directory.' },
      { command: 'git clone [url]', description: 'Creates a local copy of a remote repository.' },
      { command: 'git add [file]', description: 'Stages a file for the next commit.' },
      { command: 'git add .', description: 'Stages all new and modified files.' },
      { command: 'git commit -m "[message]"', description: 'Commits the staged changes with a message.' },
      { command: 'git status', description: 'Shows the status of changes as untracked, modified, or staged.' },
      { command: 'git push', description: 'Uploads local repository content to a remote repository.' },
      { command: 'git pull', description: 'Fetches and merges changes from the remote repository to the local one.' },
      { command: 'git branch', description: 'Lists all of the branches in your repository.' },
      { command: 'git checkout [branch-name]', description: 'Switches to the specified branch.' },
      { command: 'git merge [branch-name]', description: 'Merges the specified branchâ€™s history into the current one.' },
    ],
  },
  {
    id: 'react-hooks',
    title: 'React Hooks',
    description: 'Essential hooks for managing state and side effects in React.',
    category: 'JavaScript',
    icon: Code,
    items: [
      { command: 'useState', description: 'Manages state in a functional component. Returns a stateful value and a function to update it.' },
      { command: 'useEffect', description: 'Performs side effects in functional components (e.g., data fetching, subscriptions).' },
      { command: 'useContext', description: 'Accepts a context object and returns the current context value.' },
      { command: 'useReducer', description: 'An alternative to useState for managing complex state logic.' },
      { command: 'useCallback', description: 'Returns a memoized callback function. Useful for performance optimizations.' },
      { command: 'useMemo', description: 'Returns a memoized value. Useful for performance optimizations.' },
      { command: 'useRef', description: 'Returns a mutable ref object whose .current property is initialized to the passed argument.' },
    ],
  },
   {
    id: 'javascript-es6',
    title: 'JavaScript (ES6+)',
    description: 'Modern syntax for variables, functions, and arrays.',
    category: 'JavaScript',
    icon: Code,
    items: [
      { command: 'const, let', description: 'Declares block-scoped variables. `const` for constants, `let` for re-assignable values.' },
      { command: '() => {}', description: 'Arrow function syntax, providing a more concise way to write functions.' },
      { command: 'const { a, b } = obj', description: 'Object destructuring to extract properties from an object.' },
      { command: 'const [a, b] = arr', description: 'Array destructuring to extract elements from an array.' },
      { command: '`Hello, ${name}`', description: 'Template literals for embedding expressions within strings.' },
      { command: 'arr.map(item => ...)', description: 'Creates a new array by applying a function to each element.' },
      { command: 'arr.filter(item => ...)', description: 'Creates a new array with all elements that pass a test.' },
      { command: 'arr.reduce((acc, cv) => ...)', description: 'Executes a reducer function on each element, resulting in a single output value.' },
      { command: 'async/await', description: 'Syntactic sugar for working with Promises, making async code look synchronous.' },
      { command: 'fetch(url)', description: 'Modern, Promise-based API for making network requests.' },
    ]
  },
  {
    id: 'python',
    title: 'Python',
    description: 'Common syntax for data structures, loops, and functions.',
    category: 'Python',
    icon: Code,
    items: [
        { command: 'print(f"Value: {var}")', description: 'Prints a formatted string (f-string) to the console.' },
        { command: '[x**2 for x in range(5)]', description: 'List comprehension for creating a new list based on an existing iterable.' },
        { command: 'my_dict["key"]', description: 'Accesses the value associated with a key in a dictionary.' },
        { command: 'my_dict.get("key", default)', description: 'Accesses a dictionary value safely, providing a default if the key does not exist.' },
        { command: 'for item in my_list:', description: 'Iterates over each item in a list.' },
        { command: 'if x > y:', description: 'Executes a block of code if a condition is true.' },
        { command: 'def my_func(arg1):', description: 'Defines a new function with a single argument.' },
        { command: 'import library as lib', description: 'Imports a library and gives it a shorter alias.' },
        { command: 'with open("file.txt") as f:', description: 'Opens a file and ensures it is properly closed, even if errors occur.' },
    ]
  },
    {
    id: 'tailwind',
    title: 'Tailwind CSS',
    description: 'Core concepts and utility classes for rapid UI development.',
    category: 'CSS',
    icon: Wind,
    items: [
      { command: 'p-4', description: 'Applies 1rem of padding on all sides.' },
      { command: 'pt-4', description: 'Applies 1rem of padding to the top.' },
      { command: 'm-4', description: 'Applies 1rem of margin on all sides.' },
      { command: 'mt-4', description: 'Applies 1rem of margin to the top.' },
      { command: 'flex', description: 'Applies display: flex to an element.' },
      { command: 'grid', description: 'Applies display: grid to an element.' },
      { command: 'grid-cols-3', description: 'Creates a grid with three columns of equal width.' },
      { command: 'items-center', description: 'Aligns flex or grid items to the center.' },
      { command: 'justify-center', description: 'Justifies flex or grid items to the center.' },
      { command: 'bg-blue-500', description: 'Sets the background color to a shade of blue.' },
      { command: 'text-white', description: 'Sets the text color to white.' },
      { command: 'rounded-lg', description: 'Applies a large border radius to an element.' },
      { command: 'shadow-md', description: 'Applies a medium box shadow.' },
      { command: 'hover:bg-blue-600', description: 'Changes the background color on hover.' },
      { command: 'md:text-lg', description: 'Applies a large font size on medium screens and up.' },
    ],
  },
  {
    id: 'bash',
    title: 'Bash Commands',
    description: 'Essential commands for navigating and managing a Linux/macOS terminal.',
    category: 'Tools',
    icon: Terminal,
    items: [
      { command: 'ls', description: 'Lists directory contents.' },
      { command: 'cd [directory]', description: 'Changes the current directory.' },
      { command: 'pwd', description: 'Prints the current working directory.' },
      { command: 'mkdir [directory]', description: 'Creates a new directory.' },
      { command: 'touch [file]', description: 'Creates a new empty file.' },
      { command: 'cp [source] [destination]', description: 'Copies files or directories.' },
      { command: 'mv [source] [destination]', description: 'Moves or renames files or directories.' },
      { command: 'rm [file]', description: 'Removes a file.' },
      { command: 'rm -r [directory]', description: 'Removes a directory and its contents recursively.' },
      { command: 'cat [file]', description: 'Displays the content of a file.' },
      { command: 'grep "[pattern]" [file]', description: 'Searches for a pattern within a file.' },
    ],
  },
  {
    id: 'sql-basics',
    title: 'SQL Basics',
    description: 'Fundamental queries for interacting with relational databases.',
    category: 'Databases',
    icon: Database,
    items: [
        { command: 'SELECT col1, col2 FROM table', description: 'Selects specified columns from a table.' },
        { command: 'SELECT * FROM table', description: 'Selects all columns from a table.' },
        { command: 'SELECT ... WHERE condition', description: 'Filters records based on a condition.' },
        { command: 'SELECT ... ORDER BY col', description: 'Sorts the results based on a column.' },
        { command: 'INSERT INTO table (c1, c2) VALUES (v1, v2)', description: 'Inserts a new row into a table.' },
        { command: 'UPDATE table SET col1=val1 WHERE cond', description: 'Updates existing rows in a table.' },
        { command: 'DELETE FROM table WHERE cond', description: 'Deletes rows from a table.' },
        { command: '... JOIN other_table ON ...', description: 'Combines rows from two or more tables.' },
        { command: 'SELECT COUNT(*) FROM table', description: 'Counts the number of rows.' },
        { command: 'SELECT ... GROUP BY col', description: 'Groups rows that have the same values.' },
    ],
  },
  {
    id: 'docker',
    title: 'Docker',
    description: 'Core commands for managing Docker containers.',
    category: 'Tools',
    icon: Container,
    items: [
        { command: 'docker build -t name .', description: 'Builds a Docker image from a Dockerfile.' },
        { command: 'docker run -p 80:80 name', description: 'Runs a command in a new container.' },
        { command: 'docker ps', description: 'Lists running containers.' },
        { command: 'docker ps -a', description: 'Lists all containers (running or stopped).' },
        { command: 'docker stop [id/name]', description: 'Stops one or more running containers.' },
        { command: 'docker rm [id/name]', description: 'Removes one or more containers.' },
        { command: 'docker images', description: 'Lists all local images.' },
        { command: 'docker rmi [id/name]', description: 'Removes one or more images.' },
        { command: 'docker-compose up', description: 'Creates and starts containers from a docker-compose.yml file.' },
        { command: 'docker-compose down', description: 'Stops and removes containers defined in docker-compose.yml.' },
    ],
  },
  {
    id: 'html-basics',
    title: 'HTML Basics',
    description: 'Fundamental tags for structuring web content.',
    category: 'Web',
    icon: Code,
    items: [
        { command: '<h1> to <h6>', description: 'Defines headings from level 1 to 6.' },
        { command: '<p>', description: 'Defines a paragraph.' },
        { command: '<a>', description: 'Defines a hyperlink.' },
        { command: '<img>', description: 'Embeds an image.' },
        { command: '<div>', description: 'Defines a division or a section.' },
        { command: '<span>', description: 'Defines a small section in a line.' },
        { command: '<ul>, <ol>, <li>', description: 'Define unordered and ordered lists.' },
        { command: '<form>', description: 'Defines an HTML form for user input.' },
        { command: '<input>', description: 'Defines an input control.' },
        { command: '<button>', description: 'Defines a clickable button.' },
    ],
  },
  {
    id: 'css-flexbox',
    title: 'CSS Flexbox',
    description: 'Properties for creating one-dimensional layouts.',
    category: 'CSS',
    icon: Wind,
    items: [
        { command: 'display: flex;', description: 'Enables flexbox layout on a container.' },
        { command: 'flex-direction: row | column;', description: 'Defines the direction of the main axis.' },
        { command: 'justify-content: center;', description: 'Aligns items along the main axis.' },
        { command: 'align-items: center;', description: 'Aligns items along the cross axis.' },
        { command: 'gap: 1rem;', description: 'Sets the gap between flex items.' },
        { command: 'flex-wrap: wrap;', description: 'Allows items to wrap onto multiple lines.' },
        { command: 'flex: 1;', description: 'Allows a flex item to grow and shrink.' },
    ],
  },
  {
    id: 'aws-cli',
    title: 'AWS CLI',
    description: 'Common commands for interacting with Amazon Web Services.',
    category: 'Cloud',
    icon: Cloud,
    items: [
        { command: 'aws configure', description: 'Configures AWS credentials and default region.' },
        { command: 'aws s3 ls', description: 'Lists S3 buckets.' },
        { command: 'aws s3 cp file s3://bucket', description: 'Copies a local file to an S3 bucket.' },
        { command: 'aws s3 sync . s3://bucket', description: 'Syncs a directory with an S3 bucket.' },
        { command: 'aws ec2 describe-instances', description: 'Lists your EC2 instances.' },
        { command: 'aws lambda invoke ...', description: 'Invokes a Lambda function.' },
        { command: 'aws iam list-users', description: 'Lists IAM users.' },
    ],
  },
  {
    id: 'kubernetes',
    title: 'Kubernetes (kubectl)',
    description: 'Essential commands for managing Kubernetes clusters.',
    category: 'Tools',
    icon: Anchor,
    items: [
        { command: 'kubectl get pods', description: 'Lists all pods in the current namespace.' },
        { command: 'kubectl get deployments', description: 'Lists all deployments.' },
        { command: 'kubectl get services', description: 'Lists all services.' },
        { command: 'kubectl describe pod [name]', description: 'Shows detailed information about a pod.' },
        { command: 'kubectl logs [pod-name]', description: 'Prints the logs for a pod.' },
        { command: 'kubectl apply -f file.yaml', description: 'Applies a configuration to a resource.' },
        { command: 'kubectl delete -f file.yaml', description: 'Deletes a resource.' },
        { command: 'kubectl exec -it [pod] -- bash', description: 'Executes a command in a container.' },
    ],
  },
  {
    id: 'java-basics',
    title: 'Java Basics',
    description: 'Fundamental syntax for the Java programming language.',
    category: 'Languages',
    icon: Code,
    items: [
      { command: 'public class Main {}', description: 'Defines a class named Main.' },
      { command: 'public static void main(String[] args)', description: 'The entry point of a Java application.' },
      { command: 'System.out.println("Text");', description: 'Prints a line of text to the console.' },
      { command: 'int x = 5;', description: 'Declares an integer variable.' },
      { command: 'String s = "Hello";', description: 'Declares a string variable.' },
      { command: 'if (condition) { ... }', description: 'Executes a block of code if a condition is true.' },
      { command: 'for (int i=0; i<5; i++) { ... }', description: 'A standard for loop.' },
      { command: 'ArrayList<String> list = new ...', description: 'Creates a new dynamic list of strings.' },
    ],
  },
  {
    id: 'c-sharp-basics',
    title: 'C# Basics',
    description: 'Core syntax for the C# programming language.',
    category: 'Languages',
    icon: Code,
    items: [
      { command: 'namespace My_App {}', description: 'Declares a namespace for organizing code.' },
      { command: 'class Program {}', description: 'Defines a class named Program.' },
      { command: 'static void Main(string[] args)', description: 'The entry point of a C# application.' },
      { command: 'Console.WriteLine("Text");', description: 'Prints a line of text to the console.' },
      { command: 'int x = 5;', description: 'Declares an integer variable.' },
      { command: 'string s = "Hello";', description: 'Declares a string variable.' },
      { command: 'if (condition) { ... }', description: 'Executes a block of code if a condition is true.' },
      { command: 'foreach (var item in collection) { ... }', description: 'Iterates over a collection.' },
      { command: 'List<string> list = new ...', description: 'Creates a new dynamic list of strings.' },
    ],
  },
  {
    id: 'go-basics',
    title: 'Go Basics',
    description: 'Fundamental syntax for the Go programming language.',
    category: 'Languages',
    icon: Code,
    items: [
      { command: 'package main', description: 'Defines the package for an executable program.' },
      { command: 'import "fmt"', description: 'Imports a package, like the "fmt" package for formatting.' },
      { command: 'func main() {}', description: 'The entry point of a Go application.' },
      { command: 'fmt.Println("Text")', description: 'Prints a line of text.' },
      { command: 'x := 5', description: 'Short variable declaration and initialization.' },
      { command: 'var s string = "Hello"', description: 'Declares a string variable.' },
      { command: 'if condition { ... }', description: 'Executes a block of code if a condition is true.' },
      { command: 'for i := 0; i < 5; i++ { ... }', description: 'A standard for loop.' },
      { command: 'slice := []int{1, 2, 3}', description: 'Creates a new slice of integers.' },
    ],
  },
  {
    id: 'ruby-basics',
    title: 'Ruby Basics',
    description: 'Core syntax for the Ruby programming language.',
    category: 'Languages',
    icon: Feather,
    items: [
      { command: 'puts "Text"', description: 'Prints a string to the console with a newline.' },
      { command: 'x = 5', description: 'Assigns a value to a variable.' },
      { command: 'def my_method(arg)', description: 'Defines a method with one argument.' },
      { command: 'if condition ... end', description: 'Executes a block of code if a condition is true.' },
      { command: 'arr = [1, 2, 3]', description: 'Creates an array.' },
      { command: 'arr.each do |item| ... end', description: 'Iterates over each item in an array.' },
      { command: 'my_hash = {key: "value"}', description: 'Creates a hash (key-value store).' },
      { command: 'class MyClass ... end', description: 'Defines a class.' },
    ],
  },
  {
    id: 'django-basics',
    title: 'Django Basics',
    description: 'Commands for the Django web framework for Python.',
    category: 'Python',
    icon: Leaf,
    items: [
      { command: 'django-admin startproject name .', description: 'Creates a new Django project.' },
      { command: 'python manage.py startapp name', description: 'Creates a new Django app within a project.' },
      { command: 'python manage.py runserver', description: 'Starts the development server.' },
      { command: 'python manage.py makemigrations', description: 'Creates new database migrations based on model changes.' },
      { command: 'python manage.py migrate', description: 'Applies database migrations.' },
      { command: 'python manage.py createsuperuser', description: 'Creates an admin user.' },
    ],
  },
  {
    id: 'flask-basics',
    title: 'Flask Basics',
    description: 'Core concepts for the Flask microframework for Python.',
    category: 'Python',
    icon: Leaf,
    items: [
      { command: 'from flask import Flask', description: 'Imports the Flask class.' },
      { command: 'app = Flask(__name__)', description: 'Creates an instance of the Flask application.' },
      { command: '@app.route("/")', description: 'A decorator to define a URL route.' },
      { command: 'def home(): ...', description: 'The view function for the route.' },
      { command: 'return "Hello, World!"', description: 'Returns a response from the view function.' },
      { command: 'app.run(debug=True)', description: 'Runs the development server in debug mode.' },
    ],
  },
  {
    id: 'jest-basics',
    title: 'Jest Basics',
    description: 'Core functions for testing JavaScript with Jest.',
    category: 'JavaScript',
    icon: TestTube,
    items: [
      { command: 'describe("group", () => { ... })', description: 'Creates a block that groups together several related tests.' },
      { command: 'test("description", () => { ... })', description: 'Defines an individual test case. (or `it`)' },
      { command: 'expect(value)', description: 'The entry point for making an assertion.' },
      { command: '.toBe(value)', description: 'A matcher to check for exact equality.' },
      { command: '.toEqual(value)', description: 'A matcher to check for deep equality of objects/arrays.' },
      { command: '.toHaveBeenCalled()', description: 'Checks if a mock function was called.' },
      { command: 'jest.fn()', description: 'Creates a mock function.' },
    ],
  },
  {
    id: 'agile-scrum',
    title: 'Agile & Scrum',
    description: 'Key terms and concepts for Agile software development.',
    category: 'Methodology',
    icon: Briefcase,
    items: [
      { command: 'Sprint', description: 'A short, time-boxed period when a scrum team works to complete a set amount of work.' },
      { command: 'Product Backlog', description: 'An ordered list of everything that is known to be needed in the product.' },
      { command: 'Sprint Backlog', description: 'The set of Product Backlog items selected for the Sprint.' },
      { command: 'User Story', description: 'A simple description of a feature told from the perspective of the end user.' },
      { command: 'Daily Stand-up', description: 'A short daily meeting for the team to sync.' },
      { command: 'Sprint Review', description: 'A meeting to inspect the increment and adapt the Product Backlog if needed.' },
      { command: 'Sprint Retrospective', description: 'A meeting for the team to reflect on the past sprint and create a plan for improvements.' },
      { command: 'Product Owner', description: 'The person responsible for managing the Product Backlog.' },
      { command: 'Scrum Master', description: 'The person responsible for ensuring the team adheres to Scrum theory and practices.' },
    ],
  },
  {
    id: 'functional-programming',
    title: 'Functional Programming',
    description: 'Core concepts of the functional programming paradigm.',
    category: 'Concepts',
    icon: FunctionSquare,
    items: [
      { command: 'Pure Functions', description: 'Functions that always return the same output for the same input and have no side effects.' },
      { command: 'Immutability', description: 'Data that cannot be changed after it is created.' },
      { command: 'First-Class Functions', description: 'Functions that can be treated like any other variable (passed as arguments, returned, etc.).' },
      { command: 'Higher-Order Functions', description: 'Functions that take other functions as arguments or return them as results.' },
      { command: 'Side Effects', description: 'Any application state change that is observable outside the called function other than its return value.' },
      { command: 'Currying', description: 'Transforming a function with multiple arguments into a sequence of functions each with a single argument.' },
    ],
  },
  {
    id: 'markdown',
    title: 'Markdown',
    description: 'Common syntax for formatting text with Markdown.',
    category: 'Tools',
    icon: Pilcrow,
    items: [
      { command: '# Heading 1', description: 'Creates a top-level heading.' },
      { command: '## Heading 2', description: 'Creates a second-level heading.' },
      { command: '**bold text**', description: 'Makes text bold.' },
      { command: '*italic text*', description: 'Makes text italic.' },
      { command: '[link text](url)', description: 'Creates a hyperlink.' },
      { command: '![alt text](image.jpg)', description: 'Embeds an image.' },
      { command: '- List item', description: 'Creates a bulleted list item.' },
      { command: '1. List item', description: 'Creates a numbered list item.' },
      { command: '`inline code`', description: 'Formats a snippet of inline code.' },
      { command: '```\ncode block\n```', description: 'Creates a fenced code block.' },
    ],
  },
  {
    id: 'typescript',
    title: 'TypeScript',
    description: 'Core syntax for adding types to JavaScript.',
    category: 'JavaScript',
    icon: Code,
    items: [
      { command: 'let myVar: string;', description: 'Declares a variable of type string.' },
      { command: 'function fn(p: number): string', description: 'A function that takes a number and returns a string.' },
      { command: 'interface MyInterface { ... }', description: 'Defines an interface (a shape for an object).' },
      { command: 'type MyType = string | number;', description: 'Defines a type alias, in this case a union type.' },
      { command: 'class MyClass { ... }', description: 'Defines a class with properties and methods.' },
      { command: 'let arr: string[] = ["a"];', description: 'Declares an array of strings.' },
      { command: 'let tuple: [string, number];', description: 'Declares a tuple with fixed types.' },
    ],
  },
  {
    id: 'c-plus-plus',
    title: 'C++',
    description: 'Fundamental syntax for the C++ programming language.',
    category: 'Languages',
    icon: Hash,
    items: [
      { command: '#include <iostream>', description: 'Includes the iostream library for input/output.' },
      { command: 'int main() { ... }', description: 'The main function where execution begins.' },
      { command: 'std::cout << "Text";', description: 'Prints text to the console.' },
      { command: 'int x = 5;', description: 'Declares an integer variable.' },
      { command: 'std::vector<int> v;', description: 'Declares a dynamic array (vector) of integers.' },
      { command: 'for(int i=0; i<5; ++i) { ... }', description: 'A standard for loop.' },
      { command: 'class MyClass { public: ... };', description: 'Defines a class.' },
    ],
  },
  {
    id: 'ai-ml-concepts',
    title: 'AI/ML Concepts',
    description: 'Fundamental concepts in Artificial Intelligence and Machine Learning.',
    category: 'Concepts',
    icon: Brain,
    items: [
      { command: 'Supervised Learning', description: 'Training a model on a labeled dataset (input-output pairs).' },
      { command: 'Unsupervised Learning', description: 'Training a model to find patterns in an unlabeled dataset.' },
      { command: 'Reinforcement Learning', description: 'Training an agent to make a sequence of decisions by rewarding it for good actions.' },
      { command: 'Neural Network', description: 'A network of interconnected nodes (neurons), inspired by the human brain.' },
      { command: 'Deep Learning', description: 'A subset of ML involving neural networks with many layers (deep neural networks).' },
      { command: 'Training/Testing Split', description: 'Splitting data into a set for training the model and a separate set for testing its performance.' },
      { command: 'Overfitting', description: 'When a model learns the training data too well, including noise, and performs poorly on new data.' },
    ],
  },
  {
    id: 'json',
    title: 'JSON',
    description: 'Syntax rules for JavaScript Object Notation data format.',
    category: 'Web',
    icon: Braces,
    items: [
      { command: '{ "key": "value" }', description: 'A simple object with one key-value pair.' },
      { command: '"key": 123', description: 'A key with a number value.' },
      { command: '"key": true', description: 'A key with a boolean value.' },
      { command: '"key": null', description: 'A key with a null value.' },
      { command: '"key": ["a", "b"]', description: 'A key with an array of strings as its value.' },
      { command: '"key": { ... }', description: 'A key with a nested object as its value.' },
      { command: '[{...}, {...}]', description: 'An array of objects.' },
    ],
  },
  {
    id: 'xml',
    title: 'XML',
    description: 'Syntax rules for eXtensible Markup Language data format.',
    category: 'Web',
    icon: Brackets,
    items: [
      { command: '<?xml version="1.0"?>', description: 'The XML declaration (prolog).' },
      { command: '<root>', description: 'The root element of the document.' },
      { command: '<element>text</element>', description: 'A simple element with text content.' },
      { command: '<element attribute="value">', description: 'An element with an attribute.' },
      { command: '<empty-element />', description: 'A self-closing (empty) element.' },
      { command: '<!-- comment -->', description: 'An XML comment.' },
    ],
  },
  {
    id: 'regex',
    title: 'Regex',
    description: 'Common symbols and patterns for Regular Expressions.',
    category: 'Tools',
    icon: Regex,
    items: [
      { command: '.', description: 'Matches any single character (except newline).' },
      { command: '*', description: 'Matches the preceding element zero or more times.' },
      { command: '+', description: 'Matches the preceding element one or more times.' },
      { command: '?', description: 'Matches the preceding element zero or one time.' },
      { command: '\\d', description: 'Matches any digit (0-9).' },
      { command: '\\w', description: 'Matches any word character (alphanumeric & underscore).' },
      { command: '\\s', description: 'Matches any whitespace character.' },
      { command: '[abc]', description: 'Matches any one of the characters a, b, or c.' },
      { command: '^', description: 'Matches the start of a string.' },
      { command: '$', description: 'Matches the end of a string.' },
    ],
  },
  {
    id: 'swift',
    title: 'Swift',
    description: 'Core syntax for Apple\'s modern programming language.',
    category: 'Languages',
    icon: Code,
    items: [
      { command: 'let constant = 10', description: 'Declares a constant.' },
      { command: 'var variable = "Hi"', description: 'Declares a variable.' },
      { command: 'if condition { ... }', description: 'Executes a block if a condition is true.' },
      { command: 'for item in collection { ... }', description: 'Iterates over a collection.' },
      { command: 'func name(arg: Type) -> ReturnType', description: 'Defines a function.' },
      { command: 'struct MyStruct { ... }', description: 'Defines a new structure (value type).' },
      { command: 'class MyClass { ... }', description: 'Defines a new class (reference type).' },
    ],
  },
  {
    id: 'kotlin',
    title: 'Kotlin',
    description: 'Fundamental syntax for the modern language for Android dev.',
    category: 'Languages',
    icon: Code,
    items: [
      { command: 'val constant = 10', description: 'Declares a read-only constant.' },
      { command: 'var variable = "Hi"', description: 'Declares a mutable variable.' },
      { command: 'if (condition) { ... }', description: 'Executes a block if a condition is true.' },
      { command: 'for (item in collection) { ... }', description: 'Iterates over a collection.' },
      { command: 'fun name(arg: Type): ReturnType', description: 'Defines a function.' },
      { command: 'data class User(...)', description: 'Creates a concise class to hold data.' },
      { command: 'val name: String? = null', description: 'Declares a nullable type.' },
    ],
  },
  {
    id: 'php',
    title: 'PHP',
    description: 'Core concepts for the server-side scripting language.',
    category: 'Languages',
    icon: Code,
    items: [
      { command: '$variable = "value";', description: 'Declares a variable.' },
      { command: 'echo "Hello";', description: 'Outputs one or more strings.' },
      { command: 'if (condition) { ... }', description: 'Executes a block if a condition is true.' },
      { command: 'foreach ($array as $value) { ... }', description: 'Iterates over an array.' },
      { command: 'function my_function($arg) { ... }', description: 'Defines a function.' },
      { command: '$_POST["name"]', description: 'Accesses data sent via the POST method.' },
      { command: '$_GET["name"]', description: 'Accesses data from the URL query string.' },
    ],
  },
  {
    id: 'ruby-on-rails',
    title: 'Ruby on Rails',
    description: 'CLI commands and concepts for the Ruby web framework.',
    category: 'Frameworks',
    icon: Feather,
    items: [
      { command: 'rails new my_app', description: 'Creates a new Rails application.' },
      { command: 'rails server', description: 'Starts the development server.' },
      { command: 'rails generate scaffold Post ...', description: 'Generates a model, views, and controller for a resource.' },
      { command: 'rails db:migrate', description: 'Runs database migrations.' },
      { command: 'rails console', description: 'Opens an interactive console for the app.' },
      { command: 'routes.rb', description: 'The file where URL routes are defined.' },
      { command: 'MVC', description: 'The Model-View-Controller architectural pattern used by Rails.' },
    ],
  },
  {
    id: 'rust',
    title: 'Rust',
    description: 'Fundamental concepts for the systems programming language.',
    category: 'Languages',
    icon: Code,
    items: [
      { command: 'let x = 5;', description: 'Declares an immutable variable.' },
      { command: 'let mut y = 10;', description: 'Declares a mutable variable.' },
      { command: 'fn main() { ... }', description: 'The main function and entry point.' },
      { command: 'if condition { ... }', description: 'Executes a block if a condition is true.' },
      { command: 'loop { ... }', description: 'Creates an infinite loop.' },
      { command: 'match value { ... }', description: 'A control flow construct for pattern matching.' },
      { command: 'struct MyStruct { ... }', description: 'Defines a structure.' },
      { command: 'enum MyEnum { ... }', description: 'Defines an enumeration.' },
    ],
  },
  {
    id: 'dart',
    title: 'Dart',
    description: 'Core concepts for the language used by Flutter.',
    category: 'Languages',
    icon: Code,
    items: [
      { command: 'var name = "Dart";', description: 'Declares a variable.' },
      { command: 'final name = "Dart";', description: 'Declares a single-assignment variable.' },
      { command: 'const name = "Dart";', description: 'Declares a compile-time constant.' },
      { command: 'if (condition) { ... }', description: 'Executes a block if a condition is true.' },
      { command: 'for (var item in list) { ... }', description: 'Iterates over a list.' },
      { command: 'void main() { ... }', description: 'The entry point of an application.' },
      { command: 'class MyClass { ... }', description: 'Defines a class.' },
    ],
  },
  {
    id: 'c',
    title: 'C',
    description: 'Fundamental syntax for the C programming language.',
    category: 'Languages',
    icon: Hash,
    items: [
      { command: '#include <stdio.h>', description: 'Includes the standard input/output library.' },
      { command: 'int main() { ... }', description: 'The main function where execution begins.' },
      { command: 'printf("Hello");', description: 'Prints formatted output to the console.' },
      { command: 'int x = 5;', description: 'Declares an integer variable.' },
      { command: 'if (condition) { ... }', description: 'Executes a block if a condition is true.' },
      { command: 'for(int i=0; i<5; i++) { ... }', description: 'A standard for loop.' },
      { command: 'int *ptr = &x;', description: 'Declares a pointer to an integer.' },
      { command: 'malloc(size)', description: 'Allocates a block of memory on the heap.' },
    ],
  },
  {
    id: 'perl',
    title: 'Perl',
    description: 'Core concepts for the versatile scripting language.',
    category: 'Languages',
    icon: Code,
    items: [
      { command: 'my $scalar = "value";', description: 'Declares a lexical scalar variable.' },
      { command: 'my @array = (1, 2, 3);', description: 'Declares a lexical array.' },
      { command: 'my %hash = (key => "value");', description: 'Declares a lexical hash.' },
      { command: 'if (condition) { ... }', description: 'Executes a block if a condition is true.' },
      { command: 'foreach my $item (@array) { ... }', description: 'Iterates over an array.' },
      { command: 'sub my_sub { ... }', description: 'Defines a subroutine (function).' },
      { command: '/pattern/', description: 'A regular expression match operator.' },
    ],
  },
  {
    id: 'sas',
    title: 'SAS',
    description: 'Fundamental statements for the statistical software suite.',
    category: 'Data Science',
    icon: Database,
    items: [
      { command: 'DATA work.new_data;', description: 'Starts a DATA step to create a dataset.' },
      { command: 'SET work.old_data;', description: 'Reads an existing SAS dataset.' },
      { command: 'PROC PRINT DATA=...;', description: 'Prints the contents of a dataset.' },
      { command: 'PROC SORT DATA=...;', description: 'Sorts a dataset.' },
      { command: 'PROC MEANS DATA=...;', description: 'Calculates descriptive statistics.' },
      { command: 'PROC FREQ DATA=...;', description: 'Generates frequency tables.' },
      { command: 'IF condition THEN ...;', description: 'Conditionally executes a statement.' },
    ],
  },
  {
    id: 'spss',
    title: 'SPSS',
    description: 'Core commands for the statistical analysis software.',
    category: 'Data Science',
    icon: Database,
    items: [
      { command: 'GET FILE="path.sav".', description: 'Opens an SPSS data file.' },
      { command: 'FREQUENCIES VARIABLES=var1.', description: 'Generates frequency tables.' },
      { command: 'DESCRIPTIVES VARIABLES=var1.', description: 'Calculates descriptive statistics.' },
      { command: 'COMPUTE new_var = var1 + var2.', description: 'Creates a new variable.' },
      { command: 'RECODE var1 (1=2) (2=1).', description: 'Recodes variable values.' },
      { command: 'T-TEST GROUPS=group(1,2).', description: 'Performs an independent samples t-test.' },
      { command: 'REGRESSION ...', description: 'Performs linear regression analysis.' },
    ],
  },
  {
    id: 'prolog',
    title: 'Prolog',
    description: 'Core concepts for the logic programming language.',
    category: 'Languages',
    icon: Brain,
    items: [
      { command: 'fact(argument).', description: 'A fact is a basic assertion.' },
      { command: 'rule(X) :- condition(X).', description: 'A rule is an inference.' },
      { command: '?- query(X).', description: 'A query asks for solutions.' },
      { command: 'Unification', description: 'The process of matching terms.' },
      { command: 'Backtracking', description: 'The process of finding alternative solutions.' },
      { command: '[Head|Tail]', description: 'The structure of a list.' },
    ],
  },
  {
    id: 'matlab',
    title: 'MATLAB',
    description: 'Fundamental syntax for the numerical computing language.',
    category: 'Data Science',
    icon: Code,
    items: [
      { command: 'A = [1 2; 3 4]', description: 'Creates a 2x2 matrix.' },
      { command: 'x = 1:5', description: 'Creates a vector from 1 to 5.' },
      { command: 'A * B', description: 'Performs matrix multiplication.' },
      { command: 'A .* B', description: 'Performs element-wise multiplication.' },
      { command: 'plot(x, y)', description: 'Creates a 2D line plot.' },
      { command: 'if condition ... end', description: 'Executes a block if a condition is true.' },
      { command: 'for i = 1:n ... end', description: 'A standard for loop.' },
      { command: 'function y = my_func(x)', description: 'Defines a function.' },
    ],
  },
  {
    id: 'powershell',
    title: 'PowerShell',
    description: 'Essential cmdlets for Windows automation.',
    category: 'Tools',
    icon: Terminal,
    items: [
      { command: 'Get-Process', description: 'Gets the processes that are running.' },
      { command: 'Get-Service', description: 'Gets the services on a computer.' },
      { command: 'Get-Help Get-Process', description: 'Displays help about a cmdlet.' },
      { command: 'verb-noun', description: 'The standard naming convention for cmdlets.' },
      { command: 'Get-Process | Where-Object', description: 'Piping objects to filter them.' },
      { command: '$variable = "value"', description: 'Declares a variable.' },
      { command: 'if (condition) { ... }', description: 'Executes a block if a condition is true.' },
    ],
  },
  {
    id: 'tensorflow',
    title: 'TensorFlow',
    description: 'Core concepts for the machine learning platform.',
    category: 'Frameworks',
    icon: Brain,
    items: [
      { command: 'tf.constant([1, 2])', description: 'Creates a constant tensor.' },
      { command: 'tf.keras.Sequential', description: 'A sequential model API.' },
      { command: 'model.add(layers.Dense(64))', description: 'Adds a layer to a model.' },
      { command: 'model.compile(...)', description: 'Configures the model for training.' },
      { command: 'model.fit(x, y)', description: 'Trains the model for a fixed number of epochs.' },
      { command: 'tf.GradientTape', description: 'Used for automatic differentiation.' },
    ],
  },
  {
    id: 'pytorch',
    title: 'PyTorch',
    description: 'Fundamental concepts for the machine learning framework.',
    category: 'Frameworks',
    icon: Brain,
    items: [
      { command: 'torch.tensor([1, 2])', description: 'Creates a tensor.' },
      { command: 'nn.Module', description: 'Base class for all neural network modules.' },
      { command: 'nn.Linear(in, out)', description: 'Applies a linear transformation.' },
      { command: 'torch.optim', description: 'A package implementing various optimization algorithms.' },
      { command: 'loss.backward()', description: 'Computes the gradient of the loss.' },
      { command: 'torch.utils.data.DataLoader', description: 'Data loader for datasets.' },
    ],
  },
  {
    id: 'flutter',
    title: 'Flutter',
    description: 'Core concepts for Google\'s cross-platform UI toolkit.',
    category: 'Frameworks',
    icon: Code,
    items: [
      { command: 'Widget', description: 'The basic building block of a Flutter UI.' },
      { command: 'StatelessWidget', description: 'A widget that does not require mutable state.' },
      { command: 'StatefulWidget', description: 'A widget that has mutable state.' },
      { command: 'build(BuildContext)', description: 'A method that describes the part of the UI represented by a widget.' },
      { command: 'Column / Row', description: 'Layout widgets for arranging children vertically/horizontally.' },
      { command: 'setState(() { ... })', description: 'Notifies the framework that the internal state has changed.' },
      { command: 'pubspec.yaml', description: 'The file that manages project dependencies.' },
    ],
  }
];

    
